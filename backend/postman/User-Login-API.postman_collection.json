{
  "info": {
    "_postman_id": "12345678-1234-1234-1234-123456789012",
    "name": "User/Login RESTful API",
    "description": "Comprehensive test suite for User/Login API with authentication, validation, and edge case testing",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Health Check - API Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status', 'OK');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData).to.have.property('database');",
                  "    pm.expect(jsonData).to.have.property('uptime');",
                  "});",
                  "",
                  "pm.test('Database is connected', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.database).to.equal('connected');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health"]
            }
          }
        }
      ]
    },
    {
      "name": "User Registration",
      "item": [
        {
          "name": "Create User - Valid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message', 'User created successfully');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('id');",
                  "    pm.expect(jsonData.user).to.have.property('username');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "    pm.expect(jsonData.user).to.not.have.property('password');",
                  "});",
                  "",
                  "pm.test('JWT cookie is set', function () {",
                  "    pm.expect(pm.cookies.has('token')).to.be.true;",
                  "});",
                  "",
                  "// Store username for future tests",
                  "const jsonData = pm.response.json();",
                  "pm.environment.set('testUsername', jsonData.user.username);",
                  "pm.environment.set('testUserId', jsonData.user.id);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"testuser_{{$randomInt}}\",\n    \"email\": \"test_{{$randomInt}}@example.com\",\n    \"password\": \"SecurePass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            }
          }
        },
        {
          "name": "Create User - Duplicate Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message for duplicate user', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.include('already exists');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{testUsername}}\",\n    \"email\": \"duplicate@example.com\",\n    \"password\": \"SecurePass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            }
          }
        },
        {
          "name": "Create User - Invalid Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error for invalid email', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"testuser2\",\n    \"email\": \"invalid-email\",\n    \"password\": \"SecurePass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            }
          }
        },
        {
          "name": "Create User - Weak Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error for weak password', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"testuser3\",\n    \"email\": \"test3@example.com\",\n    \"password\": \"123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            }
          }
        },
        {
          "name": "Create User - Missing Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error for missing fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"testuser4\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            }
          }
        }
      ]
    },
    {
      "name": "User Authentication",
      "item": [
        {
          "name": "Login - Valid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message', 'Login successful');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('id');",
                  "    pm.expect(jsonData.user).to.have.property('username');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "    pm.expect(jsonData.user).to.have.property('role');",
                  "    pm.expect(jsonData.user).to.not.have.property('password');",
                  "});",
                  "",
                  "pm.test('JWT cookie is set', function () {",
                  "    pm.expect(pm.cookies.has('token')).to.be.true;",
                  "});",
                  "",
                  "// Store user role for future tests",
                  "const jsonData = pm.response.json();",
                  "pm.environment.set('userRole', jsonData.user.role);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{testUsername}}\",\n    \"password\": \"SecurePass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "login"]
            }
          }
        },
        {
          "name": "Login - Invalid Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message for invalid credentials', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error', 'Invalid credentials');",
                  "});",
                  "",
                  "pm.test('No JWT cookie is set', function () {",
                  "    pm.expect(pm.cookies.has('token')).to.be.false;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"nonexistentuser\",\n    \"password\": \"SecurePass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "login"]
            }
          }
        },
        {
          "name": "Login - Invalid Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message for invalid credentials', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error', 'Invalid credentials');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{testUsername}}\",\n    \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "login"]
            }
          }
        },
        {
          "name": "Login - Missing Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error for missing fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{testUsername}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "User Management - Authenticated",
      "item": [
        {
          "name": "Get All Users - Authenticated",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('count');",
                  "    pm.expect(jsonData).to.have.property('users');",
                  "    pm.expect(jsonData.users).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Users contain only username field', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.users.length > 0) {",
                  "        jsonData.users.forEach(user => {",
                  "            pm.expect(user).to.have.property('username');",
                  "            pm.expect(user).to.not.have.property('password');",
                  "            pm.expect(user).to.not.have.property('email');",
                  "        });",
                  "    }",
                  "});",
                  "",
                  "pm.test('Count matches array length', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.count).to.equal(jsonData.users.length);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            }
          }
        },
        {
          "name": "Get All Users - Unauthenticated",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Clear cookies to test unauthenticated access",
                  "pm.cookies.clear();"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message for unauthenticated access', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            }
          }
        },
        {
          "name": "Get Specific User - Valid Username",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Re-login to get authentication cookie",
                  "pm.sendRequest({",
                  "    url: pm.environment.get('baseUrl') + '/api/login',",
                  "    method: 'POST',",
                  "    header: {",
                  "        'Content-Type': 'application/json'",
                  "    },",
                  "    body: {",
                  "        mode: 'raw',",
                  "        raw: JSON.stringify({",
                  "            username: pm.environment.get('testUsername'),",
                  "            password: 'SecurePass123!'",
                  "        })",
                  "    }",
                  "}, function (err, response) {",
                  "    if (err) console.log(err);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('username');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "    pm.expect(jsonData.user).to.have.property('role');",
                  "    pm.expect(jsonData.user).to.not.have.property('password');",
                  "});",
                  "",
                  "pm.test('Returned username matches requested', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.username).to.equal(pm.environment.get('testUsername'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{testUsername}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{testUsername}}"]
            }
          }
        },
        {
          "name": "Get Specific User - Nonexistent Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message for user not found', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error', 'User not found');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/users/nonexistentuser",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "nonexistentuser"]
            }
          }
        }
      ]
    },
    {
      "name": "User Updates",
      "item": [
        {
          "name": "Update User - Valid Data (Self)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message', 'User updated successfully');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.not.have.property('password');",
                  "});",
                  "",
                  "pm.test('Email was updated', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.email).to.include('updated');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"updated_{{$randomInt}}@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{testUsername}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{testUsername}}"]
            }
          }
        },
        {
          "name": "Update User - Invalid Email Format",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error for invalid email', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"invalid-email-format\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/{{testUsername}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{testUsername}}"]
            }
          }
        },
        {
          "name": "Update User - Nonexistent User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message for user not found', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error', 'User not found');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"test@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/nonexistentuser",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "nonexistentuser"]
            }
          }
        }
      ]
    },
    {
      "name": "Admin Operations",
      "item": [
        {
          "name": "Create Admin User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Store admin username for future tests",
                  "const jsonData = pm.response.json();",
                  "pm.environment.set('adminUsername', jsonData.user.username);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"admin_{{$randomInt}}\",\n    \"email\": \"admin_{{$randomInt}}@example.com\",\n    \"password\": \"AdminPass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            }
          }
        },
        {
          "name": "Login as Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// Note: In a real scenario, you'd need to manually set the admin role in the database",
                  "// This test assumes the admin user exists with admin role"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{adminUsername}}\",\n    \"password\": \"AdminPass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "login"]
            }
          }
        },
        {
          "name": "Delete User - Admin Only",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This test will likely return 403 unless the user is actually set as admin in DB",
                  "pm.test('Status code is either 200 or 403', function () {",
                  "    pm.expect([200, 403]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('User deleted successfully', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message', 'User deleted successfully');",
                  "    });",
                  "} else if (pm.response.code === 403) {",
                  "    pm.test('Access denied for non-admin', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('error');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/users/{{testUsername}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "{{testUsername}}"]
            }
          }
        },
        {
          "name": "Delete Nonexistent User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 403 or 404', function () {",
                  "    pm.expect([403, 404]).to.include(pm.response.code);",
                  "});",
                  "",
                  "pm.test('Appropriate error message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/users/nonexistentuser",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "nonexistentuser"]
            }
          }
        }
      ]
    },
    {
      "name": "Rate Limiting Tests",
      "item": [
        {
          "name": "Test Login Rate Limiting",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response received (rate limit may or may not be hit)', function () {",
                  "    pm.expect([200, 401, 429]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 429) {",
                  "    pm.test('Rate limit message', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('error');",
                  "        pm.expect(jsonData.error).to.include('Too many');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"wronguser\",\n    \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "Edge Cases and Security",
      "item": [
        {
          "name": "SQL Injection Attempt in Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 or 401', function () {",
                  "    pm.expect([400, 401]).to.include(pm.response.code);",
                  "});",
                  "",
                  "pm.test('No sensitive data in response', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.not.include('SELECT');",
                  "    pm.expect(responseText).to.not.include('DROP');",
                  "    pm.expect(responseText).to.not.include('INSERT');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"'; DROP TABLE users; --\",\n    \"password\": \"password\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "login"]
            }
          }
        },
        {
          "name": "XSS Attempt in User Creation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('No script execution in response', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.not.include('<script>');",
                  "    pm.expect(responseText).to.not.include('javascript:');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"<script>alert('xss')</script>\",\n    \"email\": \"test@example.com\",\n    \"password\": \"SecurePass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            }
          }
        },
        {
          "name": "Large Payload Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 or 413', function () {",
                  "    pm.expect([400, 413]).to.include(pm.response.code);",
                  "});",
                  "",
                  "pm.test('Appropriate error for large payload', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{$randomLoremWords}}\".repeat(1000),\n    \"email\": \"test@example.com\",\n    \"password\": \"SecurePass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            }
          }
        },
        {
          "name": "Invalid Content-Type",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 or 415', function () {",
                  "    pm.expect([400, 415]).to.include(pm.response.code);",
                  "});",
                  "",
                  "pm.test('Appropriate error for invalid content type', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "username=test&password=test"
            },
            "url": {
              "raw": "{{baseUrl}}/api/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "login"]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Running request: ' + pm.info.requestName);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has Content-Type header', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "testUsername",
      "value": "",
      "type": "string"
    },
    {
      "key": "testUserId",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminUsername",
      "value": "",
      "type": "string"
    },
    {
      "key": "userRole",
      "value": "",
      "type": "string"
    }
  ]
}
